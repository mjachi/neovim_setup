snippet main
	int main(int argc, char *argv[]) {
		${0}
		return 0;
	}

snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0:${VISUAL}}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
# ifi
snippet ifi
	if (${1:true}) ${0};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}

# for
snippet for
	int ${2:i};
	for (int ${2} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	int ${1:i};
	for (${1} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});

# function definition
snippet func
	${1:void} ${2:function_name}(${3}) {
		${4}
	}
# function definition with zero parameters
snippet fun0
	${1:void} ${2:function_name}()
	{
		${3}
	}
# function definition with one parameter
snippet fun1
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}) {
		${5}
	}
# function definition with two parameters
snippet fun2
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}) {
		${7}
	}

snippet fund
	${1:void} ${2:function_name}(${3});

snippet td
	typedef ${1:int} ${2:MyCustomType};

snippet st
	/*! \struct $1
	 *  \brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};

snippet tds
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
# typedef enum
snippet tde
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};

snippet pr
	printf("${1:%s}\n"${2});
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);

## Assertions
snippet asr
	assert(${1:condition});

snippet anl
	assert(${1:ptr} != NULL);

## Dynamic Allocation
snippet mlc
	${1:ptr} = (${2:type}*) malloc(sizeof($2));

snippet clc
	${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));

snippet rlc
	${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));

snippet mlcd
	${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));

snippet clcd
	${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));

snippet fre
	free(${1:ptr});
