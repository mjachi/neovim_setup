# Keywords
snippet pu
	public

snippet pr
	private

snippet in
	internal

snippet t
	true

snippet f
	false

snippet dl
	delete ${1};

snippet rt "return"
	return ${1};

snippet rts "returns"
	returns

snippet co
	constant

snippet im "" b
	import "${1}";

snippet tr "throw"
	throw;

snippet sd "selfdestruct"
	selfdestruct(${1});

snippet new
	${1} = new ${2}(${3});

snippet ev "event" b
	event ${1}(${2});

# Variables and data structures
snippet ui
	uint ${1};

snippet uip
	uint public ${1};

snippet in
	int ${1};

snippet inp
	int public ${1};

snippet bl
	bool ${1};

snippet bts
	bytes

snippet v
	var ${1};

snippet va
	var ${1} = ${2};

snippet blp
	bool public ${1};

snippet sr "string"
	string ${1};

snippet stri "string"
	string ${1};

snippet srp
	string public ${1};

snippet struct "" b
	struct ${1} {
			${2}
	}

snippet stru "" b
	struct ${1} {
			${2}
	}

snippet en "" b
	enum ${1} { ${2} };

snippet adr "" b
	address ${1};

snippet ad
	address

snippet adrp "" b
	address public ${1};

snippet mp "" b
	mapping (${1} => ${2}) ${3};

snippet mpp "public mapping" b
	mapping (${1} => ${2}) public ${3};

# Contracts/functions
snippet cont "Contract" b
	contract ${1} {
			${2}
	}

snippet conta "Contract with some standard features" b
	contract ${1} {
			function ${1}(${2}) {
		${3}
			}

			function remove() {
		if(msg.sender == creator) {
				selfdestruct(creator);
		}
			}

			function () { throw; }
	}

snippet fun "" b
	function ${1}(${2}) {
			${3}
	}

snippet funm "Function with modifier" b
	function ${1}(${2})
	${3}(${4})
	{
		${5}
	}

snippet funr "Function with returns" b
	function ${1}(${2}) returns (${3}){
		${4}
	}

snippet mod "" b
	modifier ${1}(${2}) {
			${3}
			_
	}

snippet modi "modifier with if" b
	modifier ${1}(${2}) {
			if (${3}) {
		${4}
			}
			_
	}

snippet modst "modifier in a certain taste"
	modifier inState(State _state) {
		if (state != _state) throw;
		_
	}

snippet modre "modifier test of condition"
	modifier require (bool condition) {
		if (!_condition) throw;
		_
	}

# Conditionals
snippet if "" b
	if (${1}) {
			${2}
	}

snippet el "" b
	else {
			${1}
	}

snippet ife ""
	if (${1}) {
		${2}
	} else {
		${3}
	}

# Loops
snippet fr "standard for"
	for(${1}) {
			${2}
	}

snippet for "incrementing for loop" b
	for(uint ${1} = ${2}; ${1} < ${3}; ${1}++) {
			$4
	}

snippet fori "For with counter" b
	for (uint i = 0; i < ${1}; i++) {
			${2}
	}

# Custom variables
snippet ms "sender" i
	msg.sender

snippet mv "value"
	msg.value

snippet mg "gas"
	msg.gas

snippet md "data"
	msg.data

snippet blc "coinbase"
	block.coinbase

snippet bld "difficulty"
	block.difficulty

snippet blg "gaslimit"
	block.gaslimit

snippet bln "number"
	block.number

snippet blb "blockhash"
	block.blockhash

snippet blt "timestamp"
	block.timestamp

snippet txg "gasprice"
	tx.gasprise

snippet txo "origin"
	tx.origin

snippet sto "default storage map"
	storage[${1}] ${2}

# Common design patterns
snippet funt "standard contract throw function" b
	function () { throw; }

snippet ifs "check if a send went through"
	if(${1}.send(${2})) {
			${3}
	}

snippet snd "send ether"
	${1}.send(${2});

snippet psh "push into an array"
	${1}.push(${2});

snippet evli "Event Listener" b
	${1}.${2}().watch({}, '', function(error, result) {
			if (!error) {
			${3}
			}
	}

# Printing
snippet cl
	console.log(${1});

# Crypto
snippet sh3 "sha3"
	sha3(${1});

snippet sh2 "sha256"
	sha256(${2});

# Comments/NatSpec
snippet /nt "Natspec with title"
	/// @title ${1}
